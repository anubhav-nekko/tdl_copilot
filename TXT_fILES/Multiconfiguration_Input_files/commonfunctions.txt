/*
$$RemoveExcelNoiseCharacter
$$IgnoreTallyNoiseCharsUCase
$$RemoveNonAlphaNumeric
$$RemoveNonAlphaNumericWithoutSpace
$$RemoveNonAlphaNumWithSplChar
*/
/* 
This section contains system directives for text processing in Tally.
These directives control how Tally handles special characters and formatting.
*/

[function : cwNum2p]
parameter : num : number
;parameter : toDeci : number : 2  ; Commented out parameter for decimal places, defaulting to 2

;; {14.Mar.23 09:46} returns : number

variable: temp : string

10 : set : temp : $$string:##num:"Decimals:2"  ; Convert number to string with 2 decimal places

;; {14.Mar.23 16:25} 11 : log : ##num  ; Commented out debug logging
;; {14.Mar.23 16:25} 12 : log : $$number:##temp  ; Commented out debug logging
20 : return : $$number:##temp  ; Convert back to number and return

;$$cwlogDetails:'Party':$Partyledgername  ; Example usage of cwLogDetails function

/* 
Function: cwNum2p
Purpose: Formats a number to exactly 2 decimal places
Parameters:
  - num: The input number to format
Returns: Number with exactly 2 decimal places
*/

[function: cwLogDetails]
parameter: str1 : string
parameter: str2 : string : ""

10 : log : ##str1 + "      "  + ##str2  ; Log the strings with spacing between them
20 : return : ##str1  ; Return the first string

/* 
Function: cwLogDetails
Purpose: Logs two strings with spacing and returns the first string
Parameters:
  - str1: Primary string to log and return
  - str2: Secondary string to log (optional, defaults to empty string)
Returns: The first string parameter
*/

[function: cwnormalize2]
parameter : str : string
parameter :ftoken : string

variable : str2 : string: ""

1000: For Token : abcd : ##str : ##ftoken  ; Split string by token and process each part
1001 : set : str2 : ##str2 + ##abcd  ; Concatenate each part to build result
1002: end for

1003 : return : ##str2  ; Return the normalized string

/* 
Function: cwnormalize2
Purpose: Helper function that removes a specific character from a string
Parameters:
  - str: The input string to process
  - ftoken: The character to remove
Returns: String with the specified character removed
*/

[function : cwNormalize]
parameter : str : string

0010 : set : str : $$cwnormalize2:##str:","  ; Remove commas
0020 : set : str : $$cwnormalize2:##str:"/"  ; Remove forward slashes
0030 : set : str : $$cwnormalize2:##str:"-"  ; Remove hyphens
0040 : set : str : $$cwnormalize2:##str:"."  ; Remove periods
0050 : set : str : $$cwnormalize2:##str:"\"  ; Remove backslashes
0060 : set : str : $$cwnormalize2:##str:"_"  ; Remove underscores
0070 : set : str : $$cwnormalize2:##str:":"  ; Remove colons

;; {03.Oct.20 13:47} 1000 : log : ##str  ; Commented out debug logging


1070 : return: ##Str  ; Return the fully normalized string

/* 
Function: cwNormalize
Purpose: Removes special characters from a string
Parameters:
  - str: The input string to normalize
Returns: String with all special characters removed
Notes: Uses cwnormalize2 to remove each type of special character
*/

[function : cwYYMMDD] ; Accepts Date and seperator, returns YYYY<Seperator>MM<Seperator>DD
parameter : mydate : date
parameter: YearSeperator : string :""
returns : string
variable : y : string : $$yearofdate:##mydate
variable : m : string : $$zerofill:($$monthofdate:##mydate):2
variable : d : string : $$zerofill:($$dayofdate:##mydate):2

00a : if : ##mydate = ""  ; Check for empty date
00b: continue  ; Skip processing if date is empty
00c: end if
;; {08.Dec.23 14:01} 0x : log : "xxxx"  ; Commented out debug logging
;; {08.Dec.23 14:01} 01 : log: ##mydate  ; Commented out debug logging
;; {08.Dec.23 14:01} 05 : log : ##y+##YearSeperator+##m+##YearSeperator+##d  ; Commented out debug logging

;; {08.Dec.23 14:01} 06:log:##mydate  ; Commented out debug logging
10 : return : ##y+##YearSeperator+##m+##YearSeperator+##d  ; Return formatted date string

/* 
Function: cwYYMMDD
Purpose: Formats a date as YYYY-MM-DD (or with custom separator)
Parameters:
  - mydate: The input date to format
  - YearSeperator: The separator character (defaults to empty string)
Returns: Formatted date string in YYYY-MM-DD format
Notes: Uses zero-padding for month and day values
*/

[function : cwYY2MMDD] ; Accepts Date and seperator, returns YY<Seperator>MM<Seperator>DD
parameter : mydate : date
parameter: YearSeperator : string :""
returns : string
variable : y : string : $$yearofdate:##mydate - 2000  ; Get 2-digit year (subtract 2000)
variable : m : string : $$zerofill:($$monthofdate:##mydate):2
variable : d : string : $$zerofill:($$dayofdate:##mydate):2
;; {22.Jul.22 11:36} 05 : log : ##y+##YearSeperator+##m+##YearSeperator+##d  ; Commented out debug logging
10 : return : ##y+##YearSeperator+##m+##YearSeperator+##d  ; Return formatted date string

/* 
Function: cwYY2MMDD
Purpose: Formats a date as YY-MM-DD (or with custom separator)
Parameters:
  - mydate: The input date to format
  - YearSeperator: The separator character (defaults to empty string)
Returns: Formatted date string in YY-MM-DD format
Notes: Uses 2-digit year (year - 2000) and zero-padding for month and day values
*/

[function : cwRound2num]
parameter : numb : number
returns : number
10 : return : $$round:##numb:(.01)  ; Round to 2 decimal places

/* 
Function: cwRound2num
Purpose: Rounds a number to 2 decimal places
Parameters:
  - numb: The input number to round
Returns: Number rounded to 2 decimal places
*/

[function : cwRound2Amt]
parameter : numb : Amount
returns : Amount
10 : return : $$round:##numb:(.01)  ; Round to 2 decimal places

/* 
Function: cwRound2Amt
Purpose: Rounds an amount to 2 decimal places
Parameters:
  - numb: The input amount to round
Returns: Amount rounded to 2 decimal places
Notes: Similar to cwRound2num but specifically for Amount type
*/

[function : cwrepla]
parameter : str : string      ;; string to replicate
parameter : numtimes : number ;; no. of times to replicate
variable : str1 : string
variable : i : NUMBER
01 : set : str1 : ""  ; Initialize empty result string
05 : set : i : 0  ; Initialize counter
10 : while : ##i < ##numtimes  ; Loop for specified number of times
20 : set : str1 : ##str1 + ##str  ; Append string to result
30 :set : i : ##i + 1  ; Increment counter
;; {22.Jul.22 11:36} 35 : LOG : "STR: " + ##STR1  ; Commented out debug logging
40 : end while
50 : return : ##str1  ; Return the replicated string

/* 
Function: cwrepla
Purpose: Replicates a string a specified number of times
Parameters:
  - str: The string to replicate
  - numtimes: Number of times to replicate the string
Returns: The replicated string
Example: cwrepla("abc", 3) returns "abcabcabc"
*/

[function : cwCreateCC]
parameter : cname : string
;;05 : log : "Creating " +##cname  ; Commented out debug logging
10 : new object : Cost Centre  ; Create new Cost Centre object
20 : set value : name : ##cname  ; Set the name
30 : create target  ; Create the object in Tally

/* 
Function: cwCreateCC
Purpose: Creates a new Cost Centre in Tally
Parameters:
  - cname: Name for the new Cost Centre
Returns: None
*/

[function : cwCreateLedger]
parameter : cname : string
parameter : parentname :string
;;05 : log : "Creating " +##cname  ; Commented out debug logging
10 : new object : Ledger  ; Create new Ledger object
20 : set value : name : ##cname  ; Set the name
30 : set value : Parent : ##parentname  ; Set the parent ledger
40 : create target  ; Create the object in Tally

/* 
Function: cwCreateLedger
Purpose: Creates a new Ledger in Tally with specified parent
Parameters:
  - cname: Name for the new Ledger
  - parentname: Name of the parent ledger
Returns: None
*/

[Function: getDateFmt]
parameter: mydt : date
parameter: YearSeperator : string :""
parameter: Yr2Digits : logical : yes
parameter: ShortMonthName : logical : Yes
; May-2012
returns : string
variable : yofdate : number
variable :  mofdate : number
variable : monthname : string
;;01 : log :"mydt"  ; Commented out debug logging
;;05 : log : ##mydt  ; Commented out debug logging
10 : do if : ##mydt = "" : Continue  ; Skip processing if date is empty
11 : set : yofdate :  $$YearOfdate:##mydt  ; Get year from date
12 : set : mofdate : $$monthofdate:##mydt  ; Get month from date

;;13 : log : ##yofdate  ; Commented out debug logging
;;14 : log : ##mofdate  ; Commented out debug logging
15 : do if : ##yofdate - 2000 < 0 : continue  ; Skip if year is before 2000

30 : do if : ##yr2Digits : set : yofdate : ##yofdate - 2000  ; Use 2-digit year if specified
35 : if : ##ShortMonthName  ; Choose month format based on parameter
36 : set : MonthName : $$shortmonthname:##mydt  ; Use short month name (e.g., Jan)
37 : else
38 : set : MonthName : $$fullmonthname:##mydt  ; Use full month name (e.g., January)
39 : end if

;;31 : log : ##yr2Digits  ; Commented out debug logging
;;32 : log : ##yearSeperator  ; Commented out debug logging
;;33 : log : ##yofdate  ; Commented out debug logging
;;34 : log : ##mofdate  ; Commented out debug logging
100 : return : ##monthname + ##YearSeperator + $$string:##yofdate  ; Return formatted date

/* 
Function: getDateFmt
Purpose: Formats a date as Month-Year (e.g., May-2012 or May-12)
Parameters:
  - mydt: The input date to format
  - YearSeperator: The separator character (defaults to empty string)
  - Yr2Digits: Whether to use 2-digit year (defaults to yes)
  - ShortMonthName: Whether to use short month name (defaults to yes)
Returns: Formatted date string (e.g., "May-12" or "May-2012")
*/

[Function: getDateFmt2]
parameter: mydt : date
parameter: YearSeperator : string :"-"
parameter: Yr2Digits : logical : yes

returns : string
variable : yofdate : number
variable :  mofdate : number
variable : monthname : string
variable : mydayofdate : number
;;01 : log :"mydt"  ; Commented out debug logging
;;05 : log : ##mydt  ; Commented out debug logging
10 : do if : ##mydt = "" : Continue  ; Skip processing if date is empty
11 : set : yofdate :  $$YearOfdate:##mydt  ; Get year from date
12 : set : mofdate : $$monthofdate:##mydt  ; Get month from date
13 : set : mydayofdate : $$dayofdate:##mydt  ; Get day from date

;;13a : log : ##yofdate  ; Commented out debug logging
;;14 : log : ##mofdate  ; Commented out debug logging
15 : do if : ##yofdate - 2000 < 0 : continue  ; Skip if year is before 2000

30 : do if : ##yr2Digits : set : yofdate : ##yofdate - 2000  ; Use 2-digit year if specified
36 : set : MonthName : $$zerofill:##mofdate:2  ; Zero-pad month to 2 digits

;;31 : log : ##yr2Digits  ; Commented out debug logging
;;32 : log : ##yearSeperator  ; Commented out debug logging
;;33 : log : ##yofdate  ; Commented out debug logging
;;34 : log : ##mofdate  ; Commented out debug logging
100 : return : $$zerofill:##mydayofdate:2 + ##YearSeperator + ##monthname + ##YearSeperator + $$string:##yofdate  ; Return formatted date

/* 
Function: getDateFmt2
Purpose: Formats a date as DD-MM-YY (or with custom separator)
Parameters:
  - mydt: The input date to format
  - YearSeperator: The separator character (defaults to "-")
  - Yr2Digits: Whether to use 2-digit year (defaults to yes)
Returns: Formatted date string (e.g., "01-05-12" for May 1, 2012)
Notes: Uses zero-padding for day and month values
*/

  ; $$cwStringReplace:<MainSTring>:<Search>:<Replace>
  ; $$cwStringReplace:$narration:"(":""
 [Function: cwStringReplace]
 parameter : str : string
 parameter : searchstring : string
 parameter : replacewith : string
 returns : string

 variable  : tempstr : string : ""

 10 : for token : tokenVar : ##str : ##searchstring  ; Split string by search string
 15 : if : ##tempstr <> ""  ; Check if this is not the first token
 20 : set : tempstr : ##tempstr + ##replacewith + ##tokenvar  ; Add replacement and token
 25 : else
 27 : set : tempstr : ##tokenvar  ; First token doesn't need replacement prefix
 28 : end if
 30 : end for
 40 : return : ##tempstr  ; Return the modified string

/* 
Function: cwStringReplace
Purpose: Replaces all occurrences of a substring with another string
Parameters:
  - str: The input string to process
  - searchstring: The substring to search for
  - replacewith: The string to replace with
Returns: Modified string with all occurrences replaced
Example: cwStringReplace("a,b,c", ",", "-") returns "a-b-c"
*/

 [Function: getcwQuarter]
parameter : mydate : date
returns : number
variable : mymonthofdate : number : $$monthofdate:##mydate
10 : do if : ##mymonthofdate >= 4 and ##mymonthofdate <= 6 : return : 1  ; Q1: Apr-Jun
20 : do if : ##mymonthofdate >= 7 and ##mymonthofdate <= 9 : return : 2  ; Q2: Jul-Sep
30 : do if : ##mymonthofdate >= 10 and ##mymonthofdate <= 12 : return : 3  ; Q3: Oct-Dec
40 : do if : ##mymonthofdate >= 1 and ##mymonthofdate <= 3 : return : 4  ; Q4: Jan-Mar

/* 
Function: getcwQuarter
Purpose: Determines the fiscal quarter (1-4) for a given date
Parameters:
  - mydate: The input date
Returns: Quarter number (1-4)
Notes: Uses Indian fiscal year (April-March) where:
  - Q1: April-June
  - Q2: July-September
  - Q3: October-December
  - Q4: January-March
*/

[function : getcwFyYr]
parameter : mydate : date
parameter : seperator : string : ""
parameter : isShort : logical : no

returns : string
variable : startyr : number
variable : endyr : number
variable : monthint : number
variable : yearint : number

;; {16.Apr.18 16:22} 00 : log :"---------" + $$string:##mydate  ; Commented out debug logging

10 : set : monthint : $$monthofdate:##mydate  ; Get month from date
20 : set : yearint : $$yearofdate:##mydate  ; Get year from date

30 : if : ##monthint >= 4  ; Check if month is April or later (new fiscal year)
40 : set : startyr : ##yearint  ; Fiscal year starts in current calendar year
50 : set : endyr : ##yearint + 1  ; Fiscal year ends in next calendar year
60 : else
70 : set : startyr : ##yearint -1  ; Fiscal year started in previous calendar year
80 : set : endyr : ##yearint  ; Fiscal year ends in current calendar year
90 : end if

91: if : ##isShort  ; Check if short year format is requested
;; {19.Nov.24 17:39} 91a: log : ##startyr  ; Commented out debug logging
;; {19.Nov.24 17:39} 91b: log : ##endyr  ; Commented out debug logging
92: set : startyr : ##startyr - 2000  ; Convert to 2-digit year
93: set : endyr : ##endyr - 2000  ; Convert to 2-digit year
94: end if

;; {19.Nov.24 17:39} 01 : log : $$string:##startyr + ##seperator + $$string:##endyr  ; Commented out debug logging
100 : return : $$string:##startyr + ##seperator + $$string:##endyr  ; Return formatted fiscal year

/* 
Function: getcwFyYr
Purpose: Formats a fiscal year string based on a date
Parameters:
  - mydate: The input date
  - seperator: Character to separate years (defaults to empty string)
  - isShort: Whether to use 2-digit years (defaults to no)
Returns: Formatted fiscal year string (e.g., "2022-2023" or "22-23")
Notes: Uses Indian fiscal year (April-March)
*/

 [Function: cwGetGSTRateForLedger]
parameter : myLedgerNAme : string
returns : number
variable : cwmyclassificationname : string
;; {08.Apr.19 18:29} 10 : log : ##myLedgerName  ; Commented out debug logging
;; {10.Apr.19 18:42} 00 : log :"X"  ; Commented out debug logging
;; {10.Apr.19 18:42} 05 : log : $$collectionfield:$HSNMASTERNAME:1:cwte2  ; Commented out debug logging

10 : if :  $$issysname:$$collectionfield:$HSNMASTERNAME:1:cwte2  ; Check if HSN code is a system name
20 : return: $$collectionfield:@@cwGSTDETAILS:(-1):cwte2  ; Return GST rate from details
30 : else
35 : set : cwmyclassificationname : $$collectionfield:$HSNMASTERNAME:1:cwte2  ; Get HSN classification name

;; {10.Apr.19 18:30} 40 : return: $$FilterValue:($$CollectionField:($$CollectionField:($$FilterValue:$GSTRATE:ratedetails:last:cwrateisigst):last:GSTStatewiseDetails):1:GSTDETAILS):cwgstclassification:1:cwsametaxrate10  ; Commented out old approach
40 : return: $$COLLECTIONFIELD:($$CollectionField:($$CollectionField:($$FilterValue:$GSTRATE:ratedetails:last:cwrateisigst):last:StatewiseDetails):1:GSTDETAILS):1:cwgstclassification  ; Return GST rate for classification

/*100 : WALK COLLECTION :  cwgstclassification
;; {10.Apr.19 18:39} 100X: LOG OBJECT
100A: WALK : GSTDETAILS
100A1: WALK : STATEWISEDETAILS
100B1 :LOG : $$FilterValue:$GSTRATE:ratedetails:last:cwrateisigst
100Y : END WALK
102Z: END WALK
102 : END WALK
*/  ; Commented out debug walk collection code

50 : end if

/* 
Function: cwGetGSTRateForLedger
Purpose: Retrieves the GST rate for a specified ledger
Parameters:
  - myLedgerName: The name of the ledger
Returns: GST rate as a number
Notes: Uses HSN classification to determine the applicable GST rate
*/

[collection : cwgstclassification]
type : gstclassification  ; Collection of GST classifications
fetch : *.*  ; Fetch all fields
keep source :yes  ; Keep source collection
filter :  cwsametaxrate10  ; Filter by matching tax rate

/* 
Collection: cwgstclassification
Purpose: Defines a collection of GST classifications for rate lookup
Type: gstclassification
Filter: Uses cwsametaxrate10 formula to match classifications
*/

[System: Formula]
cwrateisigst : $GSTRATEDUTYHEAD = "Integrated Tax"  ; Formula to identify IGST entries
cwsametaxrate10:($name = ##cwmyclassificationname) or $hsn = ##cwmyclassificationname  ; Formula to match classification by name or HSN code

/* 
System Formulas:
- cwrateisigst: Identifies entries with duty head as "Integrated Tax" (IGST)
- cwsametaxrate10: Matches GST classifications by name or HSN code
*/

[Collection: cwte2]
type : GSTDETAILS : ledger  ; Collection of GST details for a ledger
child of : ##myLedgerName  ; Child of the specified ledger
fetch : *.*  ; Fetch all fields

/* 
Collection: cwte2
Purpose: Retrieves GST details for a specific ledger
Type: GSTDETAILS (child of ledger)
*/

 [Function: cwGetGSTRateForInclusive]
parameter : myitemname : string
returns : number
20 : return: $$collectionfield:@@cwGSTDETAILS:(-1):cwte1  ; Return GST rate from details

/* 
Function: cwGetGSTRateForInclusive
Purpose: Retrieves the GST rate for inclusive pricing calculations
Parameters:
  - myitemname: The name of the stock item
Returns: GST rate as a number
Notes: Uses cwte1 collection to get the appropriate GST rate
*/

[System: Formula]
cwGSTDETAILS : $$CollectionField:@@cwSTATEWISEDETAILS:(-1):STATEWISEDETAILS  ; Formula to get GST details from statewise details
cwSTATEWISEDETAILS: $$FilterValue:$gstrate:RATEDETAILS:last:cwdutyheaditax  ; Formula to filter rate details by IGST
cwdutyheaditax : $GSTRATEDUTYHEAD = "Integrated Tax"  ; Formula to identify IGST entries

/* 
System Formulas:
- cwGSTDETAILS: Retrieves GST details from statewise details
- cwSTATEWISEDETAILS: Filters rate details to get the latest IGST entry
- cwdutyheaditax: Identifies entries with duty head as "Integrated Tax" (IGST)
*/

[Collection: cwte1]
type : GSTDETAILS : stockitem  ; Collection of GST details for a stock item
child of : ##myitemname  ; Child of the specified stock item
fetch : *.*  ; Fetch all fields

/* 
Collection: cwte1
Purpose: Retrieves GST details for a specific stock item
Type: GSTDETAILS (child of stockitem)
*/

[function: cwyymm]
parameter: mydate : date
returns  : number
variable : monthint : number
variable : yearint : number

;; {16.Apr.18 16:22} 00 : log :"---------" + $$string:##mydate  ; Commented out debug logging

10 : set : monthint : $$monthofdate:##mydate  ; Get month from date
20 : set : yearint : $$yearofdate:##mydate * 100  ; Get year from date and multiply by 100

;; {03.Jul.19 12:19} 100 : log: ##mydate  ; Commented out debug logging
;; {03.Jul.19 12:19} 101 : log :"ym"  ; Commented out debug logging
;; {03.Jul.19 12:37} 105 : log : ##yearint + ##monthint  ; Commented out debug logging
100 : return : ##yearint + ##monthint  ; Return year and month as a single number (YYYYMM)

/* 
Function: cwyymm
Purpose: Converts a date to a YYYYMM format number
Parameters:
  - mydate: The input date
Returns: Number in YYYYMM format (e.g., 202205 for May 2022)
Example: cwyymm("01-05-2022") returns 202205
*/

[function : cwDDMMYYYY]
parameter : mydate : date
parameter: Seperator : string :"-"
returns : string
variable : y : string : $$yearofdate:##mydate
variable : m : string : $$zerofill:($$monthofdate:##mydate):2
variable : d : string : $$zerofill:($$dayofdate:##mydate):2
;; {21.Jul.22 18:58} 00 : log : ##mydate  ; Commented out debug logging
01 : do if : ##d = "00" : return : ""  ; Return empty string for invalid date
;; {21.Jul.22 18:58} 05 : log : ##d+##Seperator+##m+##Seperator+##y  ; Commented out debug logging
10 : return : ##d+##Seperator+##m+##Seperator+##y  ; Return formatted date string

/* 
Function: cwDDMMYYYY
Purpose: Formats a date as DD-MM-YYYY (or with custom separator)
Parameters:
  - mydate: The input date to format
  - Seperator: The separator character (defaults to "-")
Returns: Formatted date string in DD-MM-YYYY format
Notes: Uses zero-padding for day and month values
*/

[function : cwYYYYMMDD]
parameter : mydate : date
parameter: Seperator : string :"-"
returns : string
variable : y : string : $$yearofdate:##mydate
variable : m : string : $$zerofill:($$monthofdate:##mydate):2
variable : d : string : $$zerofill:($$dayofdate:##mydate):2
;; {21.Jul.22 18:58} 00 : log : ##mydate  ; Commented out debug logging
01 : do if : ##d = "00" : return : ""  ; Return empty string for invalid date
;; {21.Jul.22 18:58} 05 : log : ##d+##Seperator+##m+##Seperator+##y  ; Commented out debug logging
10 : return : ##y+##Seperator+##m+##Seperator+##d  ; Return formatted date string

/* 
Function: cwYYYYMMDD
Purpose: Formats a date as YYYY-MM-DD (or with custom separator)
Parameters:
  - mydate: The input date to format
  - Seperator: The separator character (defaults to "-")
Returns: Formatted date string in YYYY-MM-DD format
Notes: Uses zero-padding for day and month values
*/

[Function: cwReplaceCharacters]
	
;; Parameter for the value to be process for replace
	Parameter	: pValue			: String
;; Parameter for the character for replace
	Parameter	: pReplaceCharacter	: String
;; Parameter for the character to replace
	Parameter	: pReplaceBy		: String
	
	Variable	: returnValue		: String
	
	Variable	: stringCounter		: Number	: 1

	000	: For Token		: splittedValue : ##pValue	: ##pReplaceCharacter  ; Split string by character to replace
	005	: 	If				: ##stringCounter = 1  ; Check if this is the first token
	010	:		Set			: returnValue	: ##returnValue + $$String:##splittedValue  ; Add first token without replacement
	015	:		Increment	: stringCounter  ; Increment counter
	020	:	Else
	025	:		Set			: returnValue	: ##returnValue + ##pReplaceBy + $$String:##splittedValue  ; Add replacement and token
	030	:	End If
	035	: End For
	040	: Return			: ##returnValue  ; Return the modified string

/* 
Function: cwReplaceCharacters
Purpose: Replaces all occurrences of a character with another string
Parameters:
  - pValue: The input string to process
  - pReplaceCharacter: The character to replace
  - pReplaceBy: The string to replace with
Returns: Modified string with all occurrences replaced
Example: cwReplaceCharacters("a,b,c", ",", "-") returns "a-b-c"
Notes: Similar to cwStringReplace but with cleaner formatting and variable names
*/
