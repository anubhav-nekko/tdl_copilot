; Created By: pg on 2012-02-11 17:50
; This file contains TDL (Tally Definition Language) code for a barcode report system in Tally

; Define the report title
[System: formula]
BarCodeReport: "BarCode"  ; Sets the title for the barcode report


; Main menu configuration
[#MENU : GATEWAY OF TALLY]
;;add : option : fao: @@cwdebug  ; Commented out debug menu option


; Commented out menu item definition
;;[!menu : fao]
;;ADD : ITEM :1R : DISPLAY : BarCodeVchDetailsx


; Report definition with specific parameters
[report : BarCodeVchDetailsx]
use : BarCodeVchDetails  ; Inherits from BarCodeVchDetails report
SET : VOUCHERTYPENAME :"stock journal"  ; Sets the voucher type to stock journal
SET : SVFROMDATE : $$DATE:"01-04-2016"  ; Sets the from date for report filtering
SET : SVtODATE : $$DATE:"01-04-2016"    ; Sets the to date for report filtering
SET : STR1 : "1"  ; Sets a string parameter used for filtering

; Main barcode report definition
[Report: BarCodeVchDetails]
        use: Dsp Template  ; Inherits from display template
      Title: @@BarCodeReport  ; Uses the formula defined above for title
   Printset: Report Title: @@BarCodeReport  ; Sets the print title
       Form: FrmBarCode  ; Specifies the form to use for display
     Export: Yes  ; Enables export functionality
;;     set  : svfromdate : ##svcurrentdate  ; Commented out date setting
;;     set  : svTodate : ##svcurrentdate    ; Commented out date setting
variable : str1  ; Declares a string variable
variable : vouchertypename  ; Declares a variable for voucher type name

;; {22.May.15 16:42} local: field : numf : xmltag : "Linebreak"  ; Commented out XML tag definition

;; Commented out previous parameter settings
;; {03.Jan.13 18:55} SET : VOUCHERTYPENAME :"PURCHASE"
;; {03.Jan.13 18:55} SET : SVFROMDATE : $$DATE:"27-04-2012"
;; {03.Jan.13 18:55} SET : SVtODATE : $$DATE:"27-04-2012"
;; {03.Jan.13 18:55} SET : STR1 : "2"
     
; Form definition for barcode display
[Form: FrmBarCode]
        use: DSP Template  ; Inherits from display template
       Part: PrtBarCode    ; Specifies the part to use
      Width: 100% Page     ; Sets width to full page
     Height: 100% Page     ; Sets height to full page
 Background: @@SV_STOCKSUMMARY  ; Sets background using a system variable
     delete: page break    ; Removes page break
; Defines bottom toolbar buttons
Bottom Toolbar Buttons 	: BottomToolBarBtn1, BottomToolBarBtn3, BottomToolBarBtn8, BottomToolBarBtn9, BottomToolBarBtn10, BottomToolBarBtn11,BottomToolBarBtn12
    local : button : report config : action :modify variable: MyPLConfigure  ; Adds a configuration button
    

; Part definition for barcode display
[Part: PrtBarCode]
       Line: LnBarCode  ; Specifies the line to use
     repeat: LnBarCode: ColBarCode  ; Repeats the line for each item in collection
     scroll: both ;;Vertical  ; Enables both horizontal and vertical scrolling
 Common Border: YEs  ; Adds border to all elements
      Total: Qtyf,amtf  ; Specifies fields to total
      ; Field definitions with width settings
      Local: field: nf: Width: 100
      Local: field: nf2: Width: 100
      Local: field: nf3: Width: 100
      Local: field: nf4: Width: 100
      Local: field: nf5: Width: 100

      ; Field definitions with maximum value settings
      Local: field: nf: Max: 100
      Local: field: nf2: max: 100
      Local: field: nf3: max: 100
      Local: field: nf4: max: 100
      Local: field: nf5: max: 100


; Collection definition for barcode data
[Collection: ColBarCode]
 ;       Use: Vouchers of Company  ; Commented out original collection source
 ;    delete: filter : daybookfilter  ; Commented out filter deletion
 type : vouchers : vouchertype  ; Specifies collection type as vouchers
 child of : ##vouchertypename  ; Filters by voucher type from variable
   Filter: ColBarCodeFilter ;;,IsNonOptionalCancelledVchs  ; Applies filter

	 ; Fetch statements to retrieve data
	 Fetch: guid,inventoryentries.GSTItemHSNCodeEx ,*.*
	 Fetch: allinventoryentries.GSTItemHSNCodeEx
	 fetch : masterid

; Filter formula definition
[system: Formula]
ColBarCodeFilter: ($masterid = $$number:##str1)  ; Filters by master ID matching str1 parameter

; Line definition for barcode display
[Line: LnBarCode]
     ; Field definitions for the line
     Fields: numf,d1,sdf,d2,nf,d3,nf2,d4,nf3,d5,nf4,d6,numf2,d7,nf5,d8,nf6,d9,nf7,D10,NF8,d11,nf9 ,d12,numf3 , +
     d13,snf,d14,snf2,d15,snf3,d16,snf4,d17,snf5
     Option: Alter on Enter  ; Enables editing on enter key
local:field: qtyf : Format : "NoSymbol, Short Form, No Compact,NoZero"  ; Formats quantity field
     local: field: numf: alter : voucher : $$isvoucher  ; Enables voucher alteration
option : alter on enter  ; Enables editing on enter key

; Field value assignments
Local: Field: numf: Set As: $$explodelevel  ; Sets explode level
Local: Field: sdf: Set As: $date  ; Sets date field
Local: Field: nf: Set As: $vouchernumber  ; Sets voucher number
Local: Field: nf2: Set As: $partyledgername  ; Sets party ledger name
Local: Field: nf3: Set As: $cwSupplierCode  ; Sets supplier code
Local: Field: nf4: Set As: $vouchertypename  ; Sets voucher type name
Local: Field: numf2: set as : @@cwchk  ; Sets check value
Local: Field: nf5: Set As: $cwsortnoStr:COMPANY:##SVCURRENTCOMPANY  ; Sets sort number for current company
Local: Field: nf6: Set As: $cwsizeStr:COMPANY:##SVCURRENTCOMPANY  ; Sets size string for current company
Local: Field: nf7: Set As: $cwproductStr:COMPANY:##SVCURRENTCOMPANY  ; Sets product string for current company
; Color settings for fields
Local: Field: nf5: Color : blue
Local: Field: nf6: Color : green
Local: Field: nf7: Color : red

Local: Field: NF8: Set As: $$CMPUSERNAME  ; Sets company username
Local: field: nf9: Set As: $cwCostStr:COMPANY:##SVCURRENTCOMPANY  ; Sets cost string for current company
; Sets cost multiplier with default value of 1
Local: Field: numf3: Set As: if ($$isempty:$cwCostMultiplier:COMPANY:##SVCURRENTCOMPANY or $cwCostMultiplier:COMPANY:##SVCURRENTCOMPANY = 0) then 1 else $cwCostMultiplier:COMPANY:##SVCURRENTCOMPANY
explode : MyBarCodeInvEntries  ; Enables explosion to inventory entries

; Additional field value assignments
Local: Field: snf: Set As: $cwproductStr2:COMPANY:##SVCURRENTCOMPANY  ; Sets product string 2
Local: Field: snf2: Set As: $cwproductStr3:COMPANY:##SVCURRENTCOMPANY  ; Sets product string 3
Local: Field: snf3: Set As: $cwproductStr4:COMPANY:##SVCURRENTCOMPANY  ; Sets product string 4

Local: Field: snf4: Set As: $reference  ; Sets reference field
Local: Field: snf5: Set As: $cwBarcodeTemplatename:Vouchertype:$VoucherTypename  ; Sets barcode template name

; Width settings for additional fields
Local: field: snf14: Width:80
Local: field: snf15: Width:80
Local: field: snf16: Width:80
Local: field: snf17: Width:80
Local: field: snf4: Width:80


; Part definition for barcode inventory entries
[part : MyBarCodeInvEntries]
line : MyBarCodeInvEntries  ; Specifies the line to use
; Options for different voucher types
option : myBCOutInvEntries : $$isstockjrnl:$vouchertypename  ; Option for stock journal
option : myBCInvEntries : not $$isstockjrnl:$vouchertypename  ; Option for non-stock journal
;; {12.Jun.18 19:13} option : myBcInvOuout   : $$IsJobMaterialIssue:$vouchertypename ;;$cwGenerateBarcodeOnOutward:Vouchertype:##SVVoucherType

; Part definition for outward inventory entries
[!part : myBCOutInvEntries]
repeat : MyBarCodeInvEntries : inventoryentriesin  ; Repeats for inward inventory entries

; Part definition for inventory entries
[!part : myBCInvEntries]
repeat : MyBarCodeInvEntries : inventoryentries  ; Repeats for all inventory entries

; Part definition for outward inventory entries
[!part : myBcInvOuout]
repeat : MyBarCodeInvEntries : inventoryentriesout  ; Repeats for outward inventory entries


; Function to calculate quantity
[function : cwfqty]
parameter : qtys : number  ; Input quantity parameter
parameter : forprimary : number ;; 1 for primary,2 for secondary  ; Parameter to determine unit type
; Variable to store divisor value
variable : divi : number : if $$isvoucher then $cwAutoQuantity:stockitem:$stockitemname else  $cwAutoQuantity:stockitem:$stockitemname


;343 : return : ##qtys  ; Commented out direct return

; Handle case where divisor is zero
0x : if : ##divi = 0
0y : set : divi : 1  ; Set divisor to 1 if it's zero
0z : end if

; Commented out debug logging statements
;; {11.Oct.18 14:43} 0112312 : log : ##qtys
;; {11.Oct.18 14:43} 0231313 : log : ##forprimary
;; {11.Oct.18 14:43} 2323324 : log : ##divi

;; {31.Jan.18 16:53} 01 : log : $stockitemname
;; {31.Jan.18 16:53} 02 : log : ##forprimary
;; {31.Jan.18 16:53} 02a: log : ##divi
;; {31.Jan.18 16:53} 03 : log : ##qtys /  ##divi
;; {31.Jan.18 16:53} 04 : log : @@cwbarcodebyfillqtyPrimary
;; {31.Jan.18 16:53} 04a:log : @@cwbarcodebyfillqty

; Handle primary unit calculation
05 : if : ##forprimary =1
10 : if : @@cwbarcodebyfillqty and @@cwbarcodebyfillqtyPrimary and ##divi > 0
20 : return  : (##qtys /  ##divi)  ; Return quantity divided by divisor
30 : end if
40 : end if

; Handle secondary unit calculation
105 : if : ##forprimary =2
110 : if : @@cwbarcodebyfillqty and not @@cwbarcodebyfillqtyPrimary and ##divi > 0
;; {31.Jan.18 17:02} 111 : log : ##qtys / ##divi  ; Commented out log
120 : return  : (##qtys / ##divi)  ; Return quantity divided by divisor
130 : end if
140 : end if

;; {31.Jan.18 17:02} 000x : log : ##qtys  ; Commented out log

100 : return : ##qtys  ; Default return of original quantity

; Formula for retail price list
[System: Formula]
MYcwrtlpricelistnew : $cwrtlpricelist:COMPANY:##SVCURRENTCOMPANY  ; Gets retail price list for current company


; Line definition for barcode inventory entries
[line : MyBarCodeInvEntries] ; Inventory Entries
;;        1      2      3     4       5           6      7      8         9      10       11        12         13      14         15     16-1       17-2     18-3     19-4     20-5     21-6      22-7
; Field definitions with column numbers commented above
field : numf,d1,nf,d2,nf2,d3,nf4,d4,ratepf,d11,numf6,d5,snf,d6,numf2,d7,snf2,d8,numf3,d9,numf4,d10,numf5,d12,numf7,d13,snf3,d14,snf4,d15,snf5 ,d16, snf6,d17,snf7,d18,snf8,d19,snf9,d20,snf10,d25,snf11,d21, ;; dont add more fields here
field : snfx4,d29,sdf,d26,snf12,d22,snf13,d23,SNF14,D30,SNF15,D27,SNF16,D28,SNF17,d32,snf18,d33,snf19,d34,snf20,d35,snf21,d36,snf22                                                                                                                    ;; add in this line,d33

; Field value assignments for inventory entries
Local: Field: nf: Set As: $stockitemname  ; Sets stock item name
Local: Field: nf2: Set As: $mailingname:stockitem:$stockitemname  ; Sets mailing name of stock item
Local: Field: nf4: Set As: $$ReptField:Name:2:STOCKITEM:$STOCKITEMNAME ;;@@CWITEMALIAS  ; Sets alternate name field
;; {03.Apr.13 14:49} Local: Field: NF4: Border: thin box ;;left right  ; Commented out border setting

; Sets quantity field with appropriate calculation
Local: Field: numf6: Set As: if not $$isempty:$actualqty then $$cwfqty:($$number:($$string:$actualqty:"Primary")):1 else $$cwfqty:($$number:($$string:$billedqty:"Primary")):1
Local: Field: snf: Set As: $baseunits:stockitem:$stockitemname  ; Sets base units of stock item
; Sets secondary quantity with conditional calculation
Local: Field: numf2: Set As: if $$issysname:$additionalunits:stockitem:$stockitemname and not (@@cwbarcodebyfillqty and not @@cwbarcodebyfillqtyPrimary ) then 0 else $$cwfqty:($$number:($$string:$actualqty:"Secondary")):2
Local: Field: snf2: Set As: $additionalunits:stockitem:$stockitemname  ; Sets additional units of stock item


Local: Field: numf7: Color : blue  ; Sets color for numf7 field

; Sets rate field based on cost configuration
Local: Field: ratepf: Set As: if @@cwcmpCostFrom = @@cwCFStandardCost then @@StdPurCost else if @@cwcmpCostFrom = @@cwCFPriceList then $$getpricefromlevel:$stockitemname:@@cwCostPL:$date:$startingfrom else if @@cwcmpCostFrom = @@cwCFStandardSale then @@StdSalesPrice else $rate
; Sets MRP rate with fallback options
Local: Field: numf3: Set As: if $$number:$mrprate <> 0 then $$number:$mrprate else if not $$isempty:$$getpricefromlevel:$stockitemname:"MRP":$date:$startingfrom then $$getpricefromlevel:$stockitemname:"MRP":$date:$startingfrom +
else $$number:@@cwitemmrprate ;;$RateofMRP:StockItem:$StockItemName

Local: Field: numf4: Set As: $RateofMRP:StockItem:$StockItemName  ; Sets MRP rate from stock item
; Sets VAT rate based on product number
Local: Field: numf5: Set As: if @@cwProductNumber < 5.0 then $rateofvat:stockitem:$stockitemname else $$GetVATItemDetails:$stockitemname:$date
Local: Field: numf7: Set As:  $$number:@@StdSellRate  ; Sets standard selling rate

Local: Field: snf3: Set As: $cwsortno:stockitem:$stockitemname  ; Sets sort number
;     Local: Field: snf4: Set As: $cwitemsize:stockitem:$stockitemname  ; Commented out size field
     Local: Field: snf5: Set As: $cwproduct:stockitem:$stockitemname  ; Sets product field
     
     ; Additional product field assignments
     Local: Field: snf6: Set As: $cwproduct2:stockitem:$stockitemname
     Local: Field: snf7: Set As: $cwproduct3:stockitem:$stockitemname
     Local: Field: snf8: Set As: $cwproduct4:stockitem:$stockitemname
     Local: Field: snf9: Set As: $parent:stockitem:$stockitemname  ; Sets parent category
     Local: Field: snf10: Set As:$grandparent:stockitem:$stockitemname  ; Sets grandparent category
     Local: Field: snf11: Set As:$category:stockitem:$stockitemname  ; Sets category
     
     ; Description and user fields
     Local: Field: snf16: Set As:$DESCRIPTION:stockitem:$stockitemname
     Local: Field: snf17: Set As:$$collectionfield:$basicuserdescription:1:basicuserdescription
     ; Price list fields
     Local: Field: snf18: Set As:$$GetPriceFromLevel:$StockItemName:@@cwwspricelist:$Date:$StartingFrom
     Local: Field: snf19: Set As:$$GetPriceFromLevel:$StockItemName:@@MYcwrtlpricelistnew:$Date:$StartingFrom
     ; Number formatting for price fields
     local: field: snf18: type: number
     Local: field: snf18: Format: "nocomma,nosymbol,decimals:0"
     local: field: snf19: type: number
     Local: field: snf19: Format: "nocomma,nosymbol,decimals:0"
     Local: Field: snf22: Set As: @@cwtemplatenameBatch  ; Sets template name for batch

     ; Width settings for various fields
     Local: Field: snf3: width: 100
     Local: Field: snf4: width: 100
     Local: Field: snf5: width: 100
     Local: Field: snf22: width: 100

     Local: Field: snf6: width: 100
     Local: Field: snf7: width: 100
     Local: Field: snf8: width: 100
     Local: Field: snf21: width: 100
     Local: Field: snf9: width: 50
     Local: Field: snf10: width: 50
     

     Local: field: nf: Width: 200
     Local: field: nf2: Width: 100
     Local: field: nf4: Width: 100

; Empty condition to skip barcode generation in certain cases
empty : (@@chkSkipBarCodeL) or (($$IsJobMaterialReceive:$vouchertypename) and not $isdeemedpositive)
explode : GodBatchAllocations  ; Enables explosion to batch allocations

; Formulas for barcode label skipping and template name
[System: Formula]
chkSkipBarCodeL : if $cwSkipBarcodeLabelGeneration:stockgroup:$parent:stockitem:$stockitemname then (if $cwPrintSkippedCodes:COMPANY:##SVCURRENTCOMPANY then no else yes) else no
cwtemplatenameBatch : $cwBarcodeTemplatename:vouchertype:$vouchertypename

;; {29.Sep.14 12:53} [#form : voucher]  ; Commented out form definition
;; {15.Jan.13 14:25} local : field : default : border : Thin box : $$IsJobMaterialReceive:$vouchertypename ;;$$isrcptnote:$vouchertypename  ; Commented out border setting


; Formula for expiry date year
[System: Formula]
myExpDateYear :  $$yearofdate:##datestr  ; Gets year from date string

; Function to parse and format date
[function : cwParseDate]
parameter : datestr : string  ; Input date string
parameter: sep : string : "-"  ; Separator character, defaults to hyphen
variable : str : string : $$zerofill:($$dayofdate:##datestr):2  ; Initializes with zero-padded day

10 : log : "---"+##dateStr  ; Logs date string for debugging
20 : if : $$isempty:##dateStr  ; Checks if date string is empty
25 : return : ##dateStr  ; Returns empty string if input is empty
30 : else
    ; Builds formatted date string
41 : set : str : ##str + ##sep  ; Adds separator after day
42 : set : str : ##str + $$zerofill:($$monthofdate:##datestr):2  ; Adds zero-padded month
43 : set : str : ##str + ##sep  ; Adds separator after month
;; {07.Aug.21 21:43} 43a: log : @@myExpDateYear  ; Commented out log for year
44 : set : str : ##str + $$string:@@myExpDateYear  ; Adds year
45 : return : ##str  ; Returns formatted date string
;; {07.Aug.21 22:01} 46 : return : "04-Apr-2020" ;; ##str  ; Commented out hardcoded return
50 : end if


; Formula for universal expiry date
[System: Formula]
cwGetUniExpiryDate : $$String:$ExpiryPeriod:UniversalDate  ; Converts expiry period to universal date format

; Part definition for batch allocations
[part : GodBatchAllocations]
 line : GodBatchAllocations  ; Specifies the line to use
repeat : GodBatchAllocations : Batch allocations  ; Repeats for each batch allocation

; Line definition for batch allocations
[line : GodBatchAllocations] ; Batch Allocations
  use : MyBarCodeInvEntries  ; Inherits from inventory entries line
delete : explode  ; Removes explosion capability

;; dont add any fields in this line, add in above line

; Field value assignments for batch allocations
Local: Field: nf: Set As: $batchname  ; Sets batch name
Local: Field: nf2: Set As: $godownname  ; Sets godown (warehouse) name
Local: Field: nf4: Set As: @@cmpmailname  ; Sets company mail name
Local: Field: numf3 : Set As: 0  ; Sets numf3 to zero
Local: Field: numf4: Set As: 0  ; Sets numf4 to zero
;; {02.Sep.23 14:39} Local: Field: numf2: Set As: 88  ; Commented out numf2 setting

Local: Field: snfx4: Set As: $cwCartonSerial  ; Sets carton serial number
; Sets date field based on manufacturing date availability
Local: Field: sdf: Set As: if $HasMfgDate:stockitem:$stockitemname then $mfdon else $date
Local: Field: snf12: Set As:$mfdon  ; Sets manufacturing date
; Sets expiry date with formatting if available
Local: Field: snf13: Set As: if $$isempty:$expiryperiod then "" else $$cwparsedate:@@cwGetUniExpiryDate  ;;$$string:$EXPIRYPERIOD:"MonthEnding"

; Caption fields with fallbacks to company information
Local: Field: SNF14: Set As:if $$isempty:$cwbatchcaption1 then ##svcurrentcompany else $cwbatchcaption1
Local: Field: SNF15: Set As:if $$isempty:$cwbatchcaption2 then @@cmpmailname else $cwbatchcaption2
Local: Field: SNF16: Set As:$cwbatchcaption3
Local: Field: SNF17: Set As:$cwmrpbatch
; Sets cost code based on configuration
Local: Field: snf18: Set As:if @@cwbatchCostCodeFrom = @@cwCostCodeFromF1 then $cwbatchcaption1 else +
if @@cwbatchCostCodeFrom = @@cwCostCodeFromF2 then $cwbatchcaption2 else +
if @@cwbatchCostCodeFrom = @@cwCostCodeFromF3 then $cwbatchcaption3 else +
"" ;; use this field for batch wise CostCode
      Local: Field: snf20: Set As: $gsthsncode:stockitem:$stockitemname ;;$GSTItemHSNCodeEx:stockitem:$StockItemName  ; Sets HSN code
     ; Sets company code with fallback to company name
     Local: Field: snf21: Set As: if $$isempty:$cwCompanycode:COMPANY:##SVCURRENTCOMPANY then ##svcurrentcompany else $cwCompanycode:COMPANY:##SVCURRENTCOMPANY
;; {07.Aug.21 16:05}      Local: Field: snf22: Set As: @@cmpmailname  ; Commented out snf22 setting
